-- #Beyond Reborn Robot
-- #@BeyondTeam

tdcli = dofile('./libs/tdcli.lua')
serpent = (loadfile "./libs/serpent.lua")()
feedparser = (loadfile "./libs/feedparser.lua")()
require('./bot/utils')
URL = require "socket.url"
http = require "socket.http"
https = require "ssl.https"
ltn12 = require "ltn12"
json = (loadfile "./libs/JSON.lua")()
mimetype = (loadfile "./libs/mimetype.lua")()
redis = (loadfile "./libs/redis.lua")()
JSON = (loadfile "./libs/dkjson.lua")()
local lgi = require ('lgi')
local notify = lgi.require('Notify')
command = '^[/!#]'
notify.init ("Telegram updates")
chats = {}
plugins = {}

function do_notify (user, msg)
	local n = notify.Notification.new(user, msg)
	n:show ()
end

function dl_cb (arg, data)
	-- vardump(data)
end

function vardump(value)
	print(serpent.block(value, {comment=false}))
end

function load_data(filename)
	local f = io.open(filename)
	if not f then
		return {}
	end
	local s = f:read('*all')
	f:close()
	local data = JSON.decode(s)
	return data
end

function save_data(filename, data)
	local s = JSON.encode(data)
	local f = io.open(filename, 'w')
	f:write(s)
	f:close()
end

function save_config( )
	serialize_to_file(_config, './data/config.lua')
	print ('>> Saved config into ./data/config.lua')
end

function whoami()
	local usr = io.popen("whoami"):read('*a')
	usr = string.gsub(usr, '^%s+', '')
	usr = string.gsub(usr, '%s+$', '')
	usr = string.gsub(usr, '[\n\r]+', ' ') 
	if usr:match("^root$") then
		tcpath = '/root/.telegram-cli'
	elseif not usr:match("^root$") then
		tcpath = '/home/'..usr..'/.telegram-cli'
	end
  print('>> Download Path = '..tcpath)
end

function create_config( )
  io.write('\n\27[1;33m>> Input your Telegram ID : \27[0;39;49m\n')
  local sudo_id =  tonumber(io.read())
  -- A simple config with basic plugins and ourselves as privileged user
	config = {
    enabled_plugins = {
		"banhammer",
		"groupmanager",
		"msg-checks",
		"plugins",
		"tools",
	    "fun",
	},
    sudo_users = {
   157059515,
   sudo_id
},
    admins = {},
    disabled_channels = {},
    moderation = {data = './data/moderation.json'},
    info_text = [[》Beyond Reborn V5.0
An advanced administration bot based on https://valtman.name/telegram-cli

》https://github.com/BeyondTeam/BDReborn

》Admins :
》@SoLiD ➣ Founder & Developer《
》@Makan ➣ Developer & Sponser《
》@Rixel ➣ Developer 《
》@Exacute ➣ Developer《
》@ToOfan ➣ Developer《
》@CiveY ➣ Developer
》@K_a_I_i_I_i_n_u_x ➣ Developer《
》@CliFather ➣ Developer《

》Special thanks to :
》@Vysheng
》@MrHalix
》@Nero_Dev
》And Beyond Team Members

》Our channel :
》@BeyondTeam《

》Our website :
》http://BeyondTeam.ir
]],
  }
	serialize_to_file(config, './data/config.lua')
end

-- Returns the config from config.lua file.
-- If file doesn't exist, create it.
function load_config( )
	local f = io.open('./data/config.lua', "r")
  -- If config.lua doesn't exist
	if not f then
		print (">> Created and Saved new config file: ./data/config.lua")
		create_config()
	else
		f:close()
	end
	local config = loadfile ("./data/config.lua")()
	for v,user in pairs(config.sudo_users) do
		print("SUDOER USER: "..user)
	end
	return config
end

whoami()
_config = load_config()

function load_plugins()
	local config = loadfile ("./data/config.lua")()
	for k, v in pairs(config.enabled_plugins) do
		print("Plugin Loaded: ", v)
		local ok, err =  pcall(function()
		local t = loadfile("plugins/"..v..'.lua')()
		plugins[v] = t
		end)
		if not ok then
			print('\27[31mError loading plugins '..v..'\27[39m')
			print(tostring(io.popen("lua plugins/"..v..".lua"):read('*all')))
			print('\27[31m'..err..'\27[39m')
		end
	end
	print('\n'..#config.enabled_plugins..' Plugins Are Active\n\nStarting BDReborn Robot...\n')
end

function msg_valid(msg)
	local msg_time = os.time() - 60
	if msg.date_ < tonumber(msg_time) then
		print('\27[36m>>>>>>OLD MESSAGE<<<<<<\27[39m')
		return false
	end
	if msg.sender_user_id_ == 777000 then
		print('\27[36m>>>>>>SERVER MESSAGE<<<<<<\27[39m')
		return false
	end
    if msg.sender_user_id_ == our_id then
		print('\27[36m>>>>>>ROBOT MESSAGE<<<<<<\27[39m')
		return false
	end
    return true
end

function match_pattern(pattern, text, lower_case)
	if text then
		local matches = {}
		if lower_case then
			matches = { string.match(text:lower(), pattern) }
		else
			matches = { string.match(text, pattern) }
		end
		if next(matches) then
			return matches
		end
	end
end

-- Check if plugin is on _config.disabled_plugin_on_chat table
local function is_plugin_disabled_on_chat(plugin_name, receiver)
  local disabled_chats = _config.disabled_plugin_on_chat
  -- Table exists and chat has disabled plugins
  if disabled_chats and disabled_chats[receiver] then
    -- Checks if plugin is disabled on this chat
    for disabled_plugin,disabled in pairs(disabled_chats[receiver]) do
      if disabled_plugin == plugin_name and disabled then
        local warning = '_Plugin_ *'..check_markdown(disabled_plugin)..'* _is disabled on this chat_'
        print(warning)
		tdcli.sendMessage(receiver, "", 0, warning, 0, "md")
        return true
      end
    end
  end
  return false
end

-- Apply plugin.pre_process function
function pre_process_msg(msg)
  for name,plugin in pairs(plugins) do
    if plugin.pre_process and msg then
		print('Preprocess:', name)
		pre_msg = plugin.pre_process(msg)
    end
  end
  return pre_msg
end

function matching(msg, pattern, plugin, plugin_name)
		matches = match_pattern(pattern, msg.text or msg.media.caption)
		if matches then
			if is_plugin_disabled_on_chat(plugin_name, msg.chat_id_) then
				return nil
			end
			print("Message matches: ", pattern..' | Plugin: '..plugin_name)
			if plugin.run then
				if not warns_user_not_allowed(plugin, msg) then
					local result = plugin.run(msg, matches)
					if result then
						tdcli.sendMessage(msg.chat_id_, msg.id_, 0, result, 0, "md")
					end
				end
			end
			return
		end
end

function match_plugin(plugin, plugin_name, msg)
local hash = "gp_lang:"..msg.to.id
local lang = redis:get(hash)
if not lang then
	for k, pattern in pairs(plugin.patterns) do
		matching(msg, pattern, plugin, plugin_name)
	end
else
	for k, pattern in pairs(plugin.patterns_fa) do
		matching(msg, pattern, plugin, plugin_name)
	end
end
end

function match_plugins(msg)
	for name, plugin in pairs(plugins) do
		match_plugin(plugin, name, msg)
	end
end

load_plugins()

 function var_cb(msg, data)
  -------------Get Var------------
	bot = {}
	msg.to = {}
	msg.from = {}
	msg.media = {}
	msg.id = msg.id_
	msg.to.type = gp_type(data.chat_id_)
	if data.content_.caption_ then
		msg.media.caption = data.content_.caption_
	end

	if data.reply_to_message_id_ ~= 0 then
		msg.reply_id = data.reply_to_message_id_
    else
		msg.reply_id = false
	end
	 function get_gp(arg, data)
		if gp_type(msg.chat_id_) == "channel" or gp_type(msg.chat_id_) == "chat" then
			msg.to.id = msg.chat_id_
			msg.to.title = data.title_
		else
			msg.to.id = msg.chat_id_
			msg.to.title = false
		end
	end
	tdcli_function ({ ID = "GetChat", chat_id_ = data.chat_id_ }, get_gp, nil)
	function botifo_cb(arg, data)
		bot.id = data.id_
		our_id = data.id_
		if data.username_ then
			bot.username = data.username_
		else
			bot.username = false
		end
		if data.first_name_ then
			bot.first_name = data.first_name_
		end
		if data.last_name_ then
			bot.last_name = data.last_name_
		else
			bot.last_name = false
		end
		if data.first_name_ and data.last_name_ then
			bot.print_name = data.first_name_..' '..data.last_name_
		else
